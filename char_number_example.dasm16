; OSless kernel library

; Bootup, jumps to the starting secuence
:boot
    SET PC, kickstarter

; Function address table
; Kernel usage
:init_kernel
    DAT _init_kernel

:add_task
    DAT _add_task

:exit
    DAT _exit

:coop
    DAT _coop

:start_coop
    DAT _start_coop

; IO
:getchar
    DAT _getchar

:getline
    DAT _getline

:putchar
    DAT _putchar

:endline
    DAT _endline

; String functions
:strcmp
    DAT _strcmp

; Memory management
:malloc
    DAT _malloc

:free
    DAT _free

;;;;;;;;;;;;;;;;;;
; Implementation ;
;;;;;;;;;;;;;;;;;;
;; Kernel
; Kernel static data
:kernel_stack
    DAT 0 ; Kernel stack pointer

:current_frame
    DAT 0 ; Set to first frame (same as kernel stack base)

:next_stack
    DAT 0xE000 ; Default first stack

:tmp
    DAT 0

; Kernel setup
:_init_kernel

    ; Heap size
    ;SET A, 0x8000
    ;SUB A, _first_segment
    ;SUB A, 3 ; First segment header

    ;SET B, _first_segment

    ;SET [B], A ; Segment size
    ;SET [1 + B], 0 ; Previous
    ;SET [2 + B], 0 ; Next

    SET PC, POP

; (First) frame structure
; 0xffff - SP (first element: PC)
; 0xfffe - X
; 0xfffd - Y
; 0xfffc - Z
; 0xfffb - I
; 0xfffa - J


; Function definitions
; Input: A, PC to execute
:_add_task

    ; Swap stacks
    SET [tmp], SP
    SET SP, [kernel_stack]

    ; Calculate in B the address for the next stack
    ; and keep the current one in C
    SET B, [next_stack]
    SET C, B

    SUB B, 0x0100

    ; Save the next
    SET [next_stack], B

    ; Save the registers
    SET [C], A ; PC
    SET PUSH, C ; SP

    SUB SP, 5 ; jump over X, Y, Z, I, J

    ; Swap stacks again
    SET [kernel_stack], SP
    SET SP, [tmp]

    SET PC, POP

:_exit
    SET PC, POP

; Starts cooperation cooperation
:_start_coop
    SET SP, 0xfffa ; 0xffff - 6, first frame
    SET PC, _go_next
    SET PC, POP


:_coop
    ; Copy stack
    SET A, SP

    ; Jump to 'kernel stack'
    SET SP, [current_frame]

    ; Copy the elements to stack
    SET PUSH, A ; SP
    SET PUSH, X ; X
    SET PUSH, Y ; Y
    SET PUSH, Z ; Z
    SET PUSH, I ; I
    SET PUSH, J ; J

    ; Go to the next 'frame' end
    IFE SP, [kernel_stack]
      SET SP, 0x10000 ; stack start

    SUB SP, 6 ; Jump to the start of the frame

  ; Load the next one
  :_go_next

    ; Load registers (has to be done in reverse order)
    SET J, POP
    SET I, POP
    SET Z, POP
    SET Y, POP
    SET X, POP
    SET A, POP

    SET [current_frame], SP

    SET SP, A

    SET PC, POP

;; IO
; Wait for a character, cooperate until is found
:_getchar
    SET A, [0x9000]
    IFE A, 0
      SET PC, _getchar_nothing

    BOR A, 0x7000
    SET [0x9000], 0
    SET PC, POP

; Nothing found
:_getchar_nothing
    JSR _coop
    SET PC, _getchar

; Read a entire line
:_getline
    SET PUSH, X
    SET PUSH, Y
    SET PUSH, Z
    SET X, A
    SET Y, SP


:_getline_loop
    JSR _getchar
    AND A, 0xFF ; Remove color info
    IFE A, 0x0A ; \n
      SET PC, _getline_done

    IFE A, 0x08 ; Backspace
      SET PC, _getline_back

    ADD Z, 1
    SET PUSH, A
    IFE X, 1 ; Copy to stdout
      JSR _getline_copy

    SET PC, _getline_loop

:_getline_copy
    BOR A, 0x7000 ; Grey over black
    JSR _putchar
    SET PC, _getline_loop

:_getline_back
    IFE Z, 0
      SET PC, _getline_loop

    SUB Z, 1
    SET A, POP
    SET A, [vram_pos]
    SUB A, 1
    SET [vram_pos], A
    SET [A], 0x0000

    SET PC, _getline_loop

:_getline_done
    ;SET A, Z
    ;JSR _malloc

    SET A, Y ; First character
    SET B, Z ; Length

    SET SP, Y
    SET Z, POP
    SET Y, POP
    SET X, POP
    SET PC, POP

; Current writing position
:vram_pos
    dat 0x8000

; Scroll everything 1 line up
:scroll
    ; Set to endline - 1 (expected to be used in last line)
    SET [vram_pos], 0x81e0
    SET B, 0x8000

:_scrolling_loop
    IFE B, 0x81f0 ; First character of last line
      SET PC, _scrolling_done

    SET C, B
    ADD C, 0x20 ; Next line
    SET [B], [C]

    ADD B, 1
    SET PC, _scrolling_loop

; Clean last line (no loop here, faster this way)
:_scrolling_done
    SET [0x81F0], 0x7020
    SET [0x81F1], 0x7020
    SET [0x81F2], 0x7020
    SET [0x81F3], 0x7020
    SET [0x81F4], 0x7020
    SET [0x81F5], 0x7020
    SET [0x81F6], 0x7020
    SET [0x81F7], 0x7020

    SET [0x81F8], 0x7020
    SET [0x81F9], 0x7020
    SET [0x81FA], 0x7020
    SET [0x81FB], 0x7020
    SET [0x81FC], 0x7020
    SET [0x81FD], 0x7020
    SET [0x81FE], 0x7020
    SET [0x81FF], 0x7020

    SET PC, POP

; Insert a character in the terminal
:_putchar

    IFE [vram_pos], 0x8200 ; 0x8000 + 32 * 16 (end of screen)
      JSR scroll

    ; Get target address
    SET B, [vram_pos]

    ; Write to vram
    SET [B], A

    ; Update column
    ADD B, 1
    SET [vram_pos], B

    SET PC, POP

:_endline
    IFE [vram_pos], 0x8200
      JSR scroll

    SET A, [vram_pos]
    AND A, 0xFFE0 ; Line
    ADD A, 0x20 ; 1+ line
    SET [vram_pos], A


    SET PC, POP

;; String
:_strcmp
    ; Different character
    IFN [A], [B]
      SET PC, _strcmp_false

    ; Has ended
    IFE [A], 0
      SET PC, _strcmp_true

    ADD A, 1
    ADD B, 1
    SET PC, _strcmp

:_strcmp_false
    SET A, 0
    SET PC, POP

:_strcmp_true
    SET A, 1
    SET PC, POP

;; Memory management
:_malloc
    SET PC, POP

:_free
    SET PC, POP
;;;;;;;;;;;;;;;;;;;
; Bootup secuence ;
;;;;;;;;;;;;;;;;;;;
:kickstarter

    ; Prepare the kernel structures
    JSR [init_kernel]

    SET SP, 0xFEEE ; Kickstarter stack (only needs 1 word) Â¿0x0001?
                   ; (may be overriden sometime in the future)

    ; Test
    ; Add task 1
    SET A, task1
    JSR [add_task]

    ; Add task 2
    SET A, task2
    JSR [add_task]

    ; Delegate! :P
    JSR [start_coop]


; IO tests
;;;;;;;;;;
; Task 1 ;
;;;;;;;;;;
:task1

    SET X, 5

:loop1
    MOD X, 26

    SET A, 0x7041
    ADD A, X
    JSR [putchar]
    JSR [coop]

    ADD X, 1
    SET PC, loop1


;;;;;;;;;;
; Task 2 ;
;;;;;;;;;;
:task2

    SET X, 10

:loop2
    MOD X, 10

    SET A, 0x7030
    ADD A, X
    JSR [putchar]
    JSR [coop]

    ADD X, 1
    SET PC, loop2
